cat(crayon::red(paste0("Overwriting stravaR.app_id from", getOption("stravaR.app_id"),
"to ", strava_token$app$key,"\n")))
options("stravaR.app_id" = strava_token$app$key)
}
if(is.different(strava_token$app$secret, "stravaR.app_secret")){
cat(crayon::red(paste0("Overwriting stravaR.app_secret to ", strava_token$app$secret,"\n")))
options("stravaR.app_secret" = strava_token$app$secret)
}
if(is.different(strava_token$app$appname, "stravaR.app_name")){
cat(crayon::red(paste0("Overwriting stravaR.app_name to ", strava_token$app$appname,"\n")))
options("stravaR.app_name" = strava_token$app$appname)
}
strava_token
}
is.token2.0 <- function(x){
inherits(x, "Token2.0")
}
#' Retrieve Strava token from environment and configs for httr
#'
#' Get token if it's previously stored, else prompt user to get one.
#' @param shiny_return_token In a shiny session, this is passed instead.
#' @return a httr configured option for token
#' For shiny the token is passed from reactive session
#'
#' @keywords internal
#' @family authentication functions
#' @importFrom httr config
get_strava_token <- function(shiny_return_token=NULL) {
if(any(which(grepl("with_mock_API", as.character(sys.calls()))))){
cat(crayon::red("Skipping token checks as using with_mock_API\n"))
return(NULL)
}
if(is.null(shiny_return_token)){
token <- StravaAuth$public_fields$token
if(is.null(token) || !is_legit_token(token)) {
strava_auth()
}
} else { #shiny session
StravaAuth$set("public", "method", "shiny", overwrite=TRUE)
token <- shiny_return_token
}
config(token = token)
}
strava_auth(new_user = TRUE)
/athletes/{id}/stats
rjson::fromJSON(rawToChar(GET("https://www.strava.com/api/v3/activities/", config(token = StravaAuth$public_fields$token))$content)
rjson::fromJSON(rawToChar(GET("https://www.strava.com/api/v3/activities/", config(token = StravaAuth$public_fields$token))$content))
rjson::fromJSON(rawToChar(GET("https://www.strava.com/api/v3/athlete", config(token = StravaAuth$public_fields$token))$content))
#' Get custom API request string
#'
#' Type in your own request string
#'
#' @param request Request string after https://www.strava.com/api/v3/, e.g. athletes
#'
#' @import httr
#' @import rjson
#'
#'
#' @export
#' @examples
#' strava_customApi(request)
strava_customApi(request){
url <- paste0("https://www.strava.com/api/v3/", request)
data <- rjson::fromJSON(rawToChar(GET(request,
config(token = StravaAuth$public_fields$token))$content))
return(data)
}
#' Get custom API request string
#'
#' Type in your own request string
#'
#' @param request Request string after https://www.strava.com/api/v3/, e.g. athletes
#'
#' @import httr
#' @import rjson
#'
#'
#' @export
#' @examples
#' strava_customApi(request)
strava_customApi <- function(request){
url <- paste0("https://www.strava.com/api/v3/", request)
data <- rjson::fromJSON(rawToChar(GET(request,
config(token = StravaAuth$public_fields$token))$content))
return(data)
}
strava_customApi("athletes")
rjson::fromJSON(rawToChar(GET("https://www.strava.com/api/v3/athlete", config(token = StravaAuth$public_fields$token))$content))
strava_customApi("athletes")
#'
#' @param request Request string after https://www.strava.com/api/v3/, e.g. athletes
#'
#' @import httr
#' @import rjson
#'
#'
#' @export
#' @examples
#' strava_customApi(request)
strava_customApi <- function(request){
url <- paste0("https://www.strava.com/api/v3/", request)
tryCath({
data <- rjson::fromJSON(rawToChar(GET(request,
config(token = StravaAuth$public_fields$token))$content))
return(data)
}, error = (err){
stop("Not an authorized API call")
})
}
#' Get custom API request string
#'
#' Type in your own request string
#'
#' @param request Request string after https://www.strava.com/api/v3/, e.g. athletes
#'
#' @import httr
#' @import rjson
#'
#'
#' @export
#' @examples
#' strava_customApi(request)
strava_customApi <- function(request){
url <- paste0("https://www.strava.com/api/v3/", request)
tryCath({
data <- rjson::fromJSON(rawToChar(GET(request,
config(token = StravaAuth$public_fields$token))$content))
return(data)
}, error = (e){
stop("Not an authorized API call")
})
}
#'
#' @param request Request string after https://www.strava.com/api/v3/, e.g. athletes
#'
#' @import httr
#' @import rjson
#'
#'
#' @export
#' @examples
#' strava_customApi(request)
strava_customApi <- function(request){
url <- paste0("https://www.strava.com/api/v3/", request)
tryCath({
data <- rjson::fromJSON(rawToChar(GET(request,
config(token = StravaAuth$public_fields$token))$content))
}, error = (e){
stop("Not an authorized API call")
})
return(data)
}
#' Get custom API request string
#'
#' Type in your own request string
#'
#' @param request Request string after https://www.strava.com/api/v3/, e.g. athletes
#'
#' @import httr
#' @import rjson
#'
#'
#' @export
#' @examples
#' strava_customApi(request)
strava_customApi <- function(request){
url <- paste0("https://www.strava.com/api/v3/", request)
tryCath({
data <- rjson::fromJSON(rawToChar(GET(request,
config(token = StravaAuth$public_fields$token))$content))
return(data)
}, error = function(e){
stop("Not an authorized API call")
})
}
strava_customApi("athletes")
#' Get custom API request string
#'
#' Type in your own request string
#'
#' @param request Request string after https://www.strava.com/api/v3/, e.g. athletes
#'
#' @import httr
#' @import rjson
#'
#'
#' @export
#' @examples
#' strava_customApi(request)
strava_customApi <- function(request){
url <- paste0("https://www.strava.com/api/v3/", request)
tryCatch({
data <- rjson::fromJSON(rawToChar(GET(request,
config(token = StravaAuth$public_fields$token))$content))
return(data)
}, error = function(e){
stop("Not an authorized API call")
})
}
strava_customApi("athletes")
strava_customApi("athletes")
traceback()
traceback()[6]
traceback()
#' Get custom API request string
#'
#' Type in your own request string
#'
#' @param request Request string after https://www.strava.com/api/v3/, e.g. athletes
#'
#' @import httr
#' @import rjson
#'
#'
#' @export
#' @examples
#' strava_customApi(request)
strava_customApi <- function(request){
url <- paste0("https://www.strava.com/api/v3/", request)
tryCatch({
data <- rjson::fromJSON(rawToChar(GET(request,
config(token = StravaAuth$public_fields$token))$content))
return(data)
}, error = function(e){
e$message <- "Not an authorized API call"
stop(e)
})
}
strava_customApi("athletes")
#' Get custom API request string
#'
#' Type in your own request string
#'
#' @param request Request string after https://www.strava.com/api/v3/, e.g. athletes
#'
#' @import httr
#' @import rjson
#'
#'
#' @export
#' @examples
#' strava_customApi(request)
strava_customApi <- function(request){
url <- paste0("https://www.strava.com/api/v3/", request)
tryCatch({
data <- rjson::fromJSON(rawToChar(GET(request,
config(token = StravaAuth$public_fields$token))$content))
return(data)
}, error = function(e){
stop("Not an authorized API call")
})
}
strava_customApi("athletes")
#' Get custom API request string
#'
#' Type in your own request string
#'
#' @param request Request string after https://www.strava.com/api/v3/, e.g. athletes
#'
#' @import httr
#' @import rjson
#'
#'
#' @export
#' @examples
#' strava_customApi(request)
strava_customApi <- function(request){
url <- paste0("https://www.strava.com/api/v3/", request)
tryCatch({
data <- rjson::fromJSON(rawToChar(GET(request,
config(token = StravaAuth$public_fields$token))$content))
return(data)
}, error = function(e){
cat("Not an authorized API call")
})
}
strava_customApi("athletes")
#' Get custom API request string
#'
#' Type in your own request string
#'
#' @param request Request string after https://www.strava.com/api/v3/, e.g. athletes
#'
#' @import httr
#' @import rjson
#'
#'
#' @export
#' @examples
#' strava_customApi(request)
strava_customApi <- function(request){
url <- paste0("https://www.strava.com/api/v3/", request)
tryCatch({
data <- rjson::fromJSON(rawToChar(GET(request,
config(token = StravaAuth$public_fields$token))$content))
return(data)
}, error = function(e){
cat(crayon::red("Error: Not an authorized API call"))
})
}
strava_customApi("athletes")
strava_customApi("athlete")
rjson::fromJSON(rawToChar(GET("https://www.strava.com/api/v3/athlete", config(token = StravaAuth$public_fields$token))$content))
strava_customApi("athlete")
request = "athlete"
(rawToChar(GET(request,
config(token = StravaAuth$public_fields$token))$content))
data <- rjson::fromJSON(rawToChar(GET(request,
config(token = StravaAuth$public_fields$token))$content))
url <- paste0("https://www.strava.com/api/v3/", request)
data <- rjson::fromJSON(rawToChar(GET(request,
config(token = StravaAuth$public_fields$token))$content))
#'
#' @param request Request string after https://www.strava.com/api/v3/, e.g. athletes
#'
#' @import httr
#' @import rjson
#'
#'
#' @export
#' @examples
#' strava_customApi(request)
strava_customApi <- function(request){
url <- paste0("https://www.strava.com/api/v3/", request)
tryCatch({
data <- rjson::fromJSON(rawToChar(GET(url,
config(token = StravaAuth$public_fields$token))$content))
return(data)
}, error = function(e){
cat(crayon::red("Error: Not an authorized API call"))
})
}
strava_customApi("athlete")
strava_customApi("athletes")
#' Get custom API request string
#'
#' Type in your own request string
#'
#' @param request Request string after https://www.strava.com/api/v3/, e.g. athletes
#'
#' @import httr
#' @import rjson
#'
#'
#' @export
#' @examples
#' strava_customApi(request)
strava_customApi <- function(request){
url <- paste0("https://www.strava.com/api/v3/", request)
tryCatch({
data <- rjson::fromJSON(rawToChar(GET(url,
config(token = StravaAuth$public_fields$token))$content))
if(data$message == "Authorization Error"){
cat(crayon::red("Error: Not an authorized API call"))
}
return(data)
}, error = function(e){
cat(crayon::red("Error: Not an authorized API call"))
})
}
strava_customApi("athletes")
#' Get custom API request string
#'
#' Type in your own request string
#'
#' @param request Request string after https://www.strava.com/api/v3/, e.g. athletes
#'
#' @import httr
#' @import rjson
#'
#'
#' @export
#' @examples
#' strava_customApi(request)
strava_customApi <- function(request){
url <- paste0("https://www.strava.com/api/v3/", request)
tryCatch({
data <- rjson::fromJSON(rawToChar(GET(url,
config(token = StravaAuth$public_fields$token))$content))
if(data$message == "Authorization Error"){
cat(crayon::red("Error: Not an authorized API call"))
} else{
return(data)
}
}, error = function(e){
cat(crayon::red("Error: Not an authorized API call"))
})
}
strava_customApi("athletes")
strava_customApi("athlete/activities")
strava_customApi("activities")
strava_customApi("activities")
strava_customApi("activities/")
#' Get activities from Strava
#'
#' Get activities from the authenticated user as a data frame
#'
#' @param dateRange Between what dates the data should be collected. Must be in date format! c(date1, date2)
#'
#' @import httr
#' @import assertthat
#' @import plyr
#' @import rjson
#'
#' @export
#' @examples
#' strava_activities(dateRange = c(date1, date2))
strava_activities <- function(dateRange){
if(!strava_check_existing_token()){
return(invisible(FALSE))
} else if(missing(dateRange)){
stop("dateRange must be set!")
}
if(!is.date(dateRange[1]) | !is.date(dateRange[2])) {
stop("dateRange must contain two date variables: c(date1, date2)")
} else {
start <- as.integer(as.POSIXct(dateRange[1]))
end <- as.integer(as.POSIXct(dateRange[2]+1))
url <- paste0("https://www.strava.com/api/v3/activities/?after=",start,"&before=",end)
}
data <- GET(url, config(token = StravaAuth$public_fields$token))
data <- rjson::fromJSON(rawToChar(data$content))
activities <- NULL
for(i in 1:(length(data))){
if (!is.null(unlist(data[[i]]))){
act <- data.frame(matrix(unlist(data[[i]]), nrow=1))
colnames(act) <- names(unlist(data[[i]]))
activities <- plyr::rbind.fill(activities, act)
}
}
return(activities)
}
strava_activities()
strava_activities(dateRange = c(as.Date("2019-01-01"), as.Date("2019-04-27")))
strava_customApi("activities")
request="activities"
data <- rjson::fromJSON(rawToChar(GET(url,
config(token = StravaAuth$public_fields$token))$content))
if(data$message == "Authorization Error"){
cat(crayon::red("Error: Not an authorized API call"))
} else{
return(data)
}
View(data)
exists(data$message)
missing(data$message)
request="ret"
url <- paste0("https://www.strava.com/api/v3/", request)
data <- rjson::fromJSON(rawToChar(GET(url,
config(token = StravaAuth$public_fields$token))$content))
View(data)
data[[2]]
names(data[[2]])
data[[2]]
data
unlist(data)
grepl("errors.code",names(unlist(data)))
any(grepl("errors.code",names(unlist(data))))
#' Get custom API request string
#'
#' Type in your own request string
#'
#' @param request Request string after https://www.strava.com/api/v3/, e.g. athletes
#'
#' @import httr
#' @import rjson
#'
#'
#' @export
#' @examples
#' strava_customApi(request)
strava_customApi <- function(request){
url <- paste0("https://www.strava.com/api/v3/", request)
tryCatch({
data <- rjson::fromJSON(rawToChar(GET(url,
config(token = StravaAuth$public_fields$token))$content))
if(any(grepl("errors.code",names(unlist(data))))){
cat(crayon::red("Error: Not an authorized API call"))
} else{
return(data)
}
}, error = function(e){
cat(crayon::red("Error: Not an authorized API call"))
})
}
strava_customApi("activities")
strava_customApi("activit")
strava_customApi("ectivities")[[1]]
strava_customApi("ectivities")
strava_customApi("activities")[[1]]
strava_customApi("2323298211")[[1]]
strava_customApi("2323298211")
strava_customApi("activity/2323298211")
strava_customApi("activities/2323298211")
strava_customApi("activities/2323298211")$speed
strava_customApi("activities/2323298211")[[1]]
strava_customApi("activities/2323298211")
strava_customApi("activities/2323298211")[[]]
strava_customApi("activities/2323298211")[['laps']]
strava_customApi("activities/2323298211")[['laps']][[1]]
strava_customApi("activities/2323298211")[['laps']][[1]]$speed
strava_customApi("activities/2323298211")[['laps']][[1]]$average_speed
strava_customApi("activities/2323298211?splits=500")[['laps']][[1]]$average_speed
strava_customApi("activities/2323298211?splits=500")
strava_customApi("activities/2323298211?splits=500") -> df
View(df)
strava_customApi("activities/2323298211?splits_metric=500") -> df
View(df)
strava_customApi("activities/2323298211?splits_distance=500") -> df
View(df)
strava_customApi("activities/2323298211?splits.distance=500") -> df
devtools::document()
